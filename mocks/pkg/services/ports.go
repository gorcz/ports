// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gorcz/ports/internal/services (interfaces: Ports)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	port "github.com/gorcz/ports/pkg/model/port"
)

// MockPorts is a mock of Ports interface.
type MockPorts struct {
	ctrl     *gomock.Controller
	recorder *MockPortsMockRecorder
}

// MockPortsMockRecorder is the mock recorder for MockPorts.
type MockPortsMockRecorder struct {
	mock *MockPorts
}

// NewMockPorts creates a new mock instance.
func NewMockPorts(ctrl *gomock.Controller) *MockPorts {
	mock := &MockPorts{ctrl: ctrl}
	mock.recorder = &MockPortsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPorts) EXPECT() *MockPortsMockRecorder {
	return m.recorder
}

// UpsertPorts mocks base method.
func (m *MockPorts) UpsertPorts(arg0 context.Context, arg1 port.Iterator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPorts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPorts indicates an expected call of UpsertPorts.
func (mr *MockPortsMockRecorder) UpsertPorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPorts", reflect.TypeOf((*MockPorts)(nil).UpsertPorts), arg0, arg1)
}
